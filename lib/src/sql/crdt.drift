import '../utils/hlc.dart';

CREATE TABLE pocketbase_records (
  id TEXT GENERATED ALWAYS AS (json_extract(data, '$.id')) VIRTUAL NOT NULL,
  data TEXT NOT NULL DEFAULT '{}',
  collectionId TEXT GENERATED ALWAYS AS (json_extract(data, '$.collectionId')) VIRTUAL NOT NULL,
  collectionName TEXT GENERATED ALWAYS AS (json_extract(data, '$.collectionName')) VIRTUAL NOT NULL,
  created TEXT GENERATED ALWAYS AS (json_extract(data, '$.created')) VIRTUAL NOT NULL,
  updated TEXT GENERATED ALWAYS AS (json_extract(data, '$.updated')) VIRTUAL NOT NULL,
  node_id TEXT GENERATED ALWAYS AS (json_extract(data, '$.node_id')) VIRTUAL NOT NULL,
  hlc TEXT GENERATED ALWAYS AS (json_extract(data, '$.hlc')) VIRTUAL NOT NULL MAPPED BY `const HlcConverter()`,
  modified TEXT GENERATED ALWAYS AS (json_extract(data, '$.modified')) VIRTUAL NOT NULL MAPPED BY `const HlcConverter()`,
  deleted_at TEXT GENERATED ALWAYS AS (json_extract(data, '$.deleted_at')) VIRTUAL,
  failed_count INTEGER DEFAULT 0,
  -- synced_at DATETIME,
  UNIQUE(id, collectionId, collectionName)
);

-- CREATE TABLE pocketbase_records_sync (
--   record_id TEXT NOT NULL,
--   collectionId TEXT NOT NULL,
--   collectionName TEXT NOT NULL,
--   synced_at DATETIME NOT NULL,
--   PRIMARY KEY (record_id, collectionId, collectionName)
-- );

CREATE TABLE kv_store (
  "key" TEXT PRIMARY KEY,
  value TEXT
);

-- getPocketbaseRecordsSyncAll:
-- SELECT * FROM pocketbase_records_sync;

-- getPocketbaseRecordsSync:
-- SELECT * FROM pocketbase_records_sync
-- WHERE record_id = :record_id
-- AND (collectionName = :collection OR collectionId = :collection);

-- setPocketbaseRecordsSync:
-- INSERT OR REPLACE INTO pocketbase_records_sync (record_id, collectionId, collectionName, synced_at)
-- VALUES (:record_id, :collectionId, :collectionName, :synced_at);

setItem:
INSERT INTO kv_store ("key", value)
VALUES (:key, :value)
ON CONFLICT ("key") DO
UPDATE SET value = :value;

getItem:
SELECT value FROM kv_store
WHERE "key" = :key;

deleteItem:
DELETE FROM kv_store
WHERE "key" = :key;

-- setCurrentSyncTime:
-- INSERT OR REPLACE INTO kv_store ("key", value)
-- VALUES ('synced_at', :synced_at);

-- getCurrentSyncTime:
-- SELECT value FROM kv_store
-- WHERE "key" = 'synced_at';

-- setRecordSynced:
-- UPDATE pocketbase_records
-- SET synced_at = :synced_at
-- WHERE id = :id
-- AND (collectionName = :collection OR collectionId = :collection);

-- getNewRecords:
-- -- SELECT * FROM pocketbase_records
-- -- WHERE synced_at IS NULL;
-- SELECT * FROM pocketbase_records
-- WHERE NOT EXISTS (
--   SELECT 1 FROM pocketbase_records_sync
--   WHERE pocketbase_records_sync.record_id = pocketbase_records.id
--   AND pocketbase_records_sync.collectionName = pocketbase_records.collectionName
--   AND pocketbase_records_sync.collectionId = pocketbase_records.collectionId
-- );

-- getUpdatedRecords:
-- -- SELECT * FROM pocketbase_records
-- -- WHERE synced_at IS NOT NULL
-- -- AND synced_at > :synced_at;
-- SELECT * FROM pocketbase_records
-- WHERE EXISTS (
--   SELECT 1 FROM pocketbase_records_sync
--   WHERE pocketbase_records_sync.record_id = pocketbase_records.id
--   AND pocketbase_records_sync.collectionName = pocketbase_records.collectionName
--   AND pocketbase_records_sync.collectionId = pocketbase_records.collectionId
--   AND synced_at > :synced_at
-- );

-- setRecordSynced:
-- INSERT OR REPLACE INTO pocketbase_records_sync (record_id, collectionId, collectionName, synced_at)
-- VALUES (:record_id, :collectionId, :collectionName, :synced_at);

-- getLastSyncedRecord:
-- SELECT * FROM pocketbase_records_sync
-- ORDER BY synced_at DESC
-- LIMIT 1;

getAllRecords:
SELECT * FROM pocketbase_records;

-- _getLastSyncedRecord:
-- SELECT * FROM pocketbase_records
-- WHERE collectionName = :collection OR collectionId = :collection
-- ORDER BY synced_at DESC
-- LIMIT 1;

_getLastModified:
SELECT pocketbase_records.**, MAX(modified) AS modified
FROM pocketbase_records;

_getLastModifiedOnlyNodeId:
SELECT pocketbase_records.**, MAX(modified) AS modified
FROM pocketbase_records
WHERE node_id = :node_id;

_getLastModifiedExceptNodeId:
SELECT pocketbase_records.**, MAX(modified) AS modified
FROM pocketbase_records
WHERE node_id != :node_id;

_insertRecord:
INSERT INTO pocketbase_records (data)
VALUES (:data)
ON CONFLICT (id, collectionId, collectionName) DO
UPDATE SET data = :data
WHERE compareHlc(excluded.hlc, pocketbase_records.hlc) > 0;
-- WHERE excluded.hlc > pocketbase_records.hlc;

getRecord:
SELECT * FROM pocketbase_records
WHERE id = :id
AND (collectionName = :collection OR collectionId = :collection);

getFailedRecords:
SELECT * FROM pocketbase_records
WHERE failed_count > 0;

resetRecordError:
UPDATE pocketbase_records
SET failed_count = 0
WHERE id = :id
AND (collectionName = :collection OR collectionId = :collection);

incrementRecordError:
UPDATE pocketbase_records
SET failed_count = failed_count + 1
WHERE id = :id
AND (collectionName = :collection OR collectionId = :collection);

_getRecords:
SELECT * FROM pocketbase_records;

_getRecordByIdAndCollection:
SELECT * FROM pocketbase_records
WHERE id = :id
AND (collectionName = :collection OR collectionId = :collection);

_getRecordsByCollection:
SELECT * FROM pocketbase_records
WHERE (collectionName = :collection OR collectionId = :collection);

_getCollectionNames:
SELECT collectionName
FROM pocketbase_records
GROUP BY collectionName;

_resetNodeIdByCollection:
UPDATE pocketbase_records
SET data = json_set(data, '$.modified', "REPLACE"(
    modified,
    :oldNodeId,
    :newNodeId
  )
)
WHERE (collectionName = :collection OR collectionId = :collection);

-- _patchRecord:
-- UPDATE pocketbase_records
-- SET data = json_patch(data, :patch), modified = :modified, is_deleted = :is_deleted
-- WHERE id = :id;

_getRecordByIdAndCollectionNonDeleted:
SELECT * FROM pocketbase_records
WHERE id = :id
AND (collectionName = :collection OR collectionId = :collection)
AND (deleted_at IS NULL OR deleted_at = '');

_getRecordsByCollectionNonDeleted:
SELECT * FROM pocketbase_records
WHERE (collectionName = :collection OR collectionId = :collection)
AND (deleted_at IS NULL OR deleted_at = '');

_deleteRecordByIdAndCollection:
UPDATE pocketbase_records
SET data = json_set(data, '$.deleted_at', :deleted_at)
WHERE id = :id
AND (collectionName = :collection OR collectionId = :collection);
